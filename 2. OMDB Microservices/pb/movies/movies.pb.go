// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: movies.proto

package movies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination string `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Keywords   string `protobuf:"bytes,2,opt,name=keywords,proto3" json:"keywords,omitempty"`
	ImdbID     string `protobuf:"bytes,3,opt,name=imdbID,proto3" json:"imdbID,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_movies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_movies_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetPagination() string {
	if x != nil {
		return x.Pagination
	}
	return ""
}

func (x *Request) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Request) GetImdbID() string {
	if x != nil {
		return x.ImdbID
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response    string    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error       string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TotalResult string    `protobuf:"bytes,3,opt,name=totalResult,proto3" json:"totalResult,omitempty"`
	Searh       []*Search `protobuf:"bytes,4,rep,name=searh,proto3" json:"searh,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_movies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_movies_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetTotalResult() string {
	if x != nil {
		return x.TotalResult
	}
	return ""
}

func (x *Response) GetSearh() []*Search {
	if x != nil {
		return x.Searh
	}
	return nil
}

type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Year   string `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	ImdbID string `protobuf:"bytes,3,opt,name=imdbID,proto3" json:"imdbID,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Poster string `protobuf:"bytes,5,opt,name=poster,proto3" json:"poster,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_movies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_movies_proto_rawDescGZIP(), []int{2}
}

func (x *Search) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Search) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Search) GetImdbID() string {
	if x != nil {
		return x.ImdbID
	}
	return ""
}

func (x *Search) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Search) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

type ResponseImdbID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   string     `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error      string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Actors     string     `protobuf:"bytes,3,opt,name=actors,proto3" json:"actors,omitempty"`
	Awards     string     `protobuf:"bytes,4,opt,name=Awards,proto3" json:"Awards,omitempty"`
	BoxOffice  string     `protobuf:"bytes,5,opt,name=BoxOffice,proto3" json:"BoxOffice,omitempty"`
	Country    string     `protobuf:"bytes,6,opt,name=Country,proto3" json:"Country,omitempty"`
	Director   string     `protobuf:"bytes,7,opt,name=Director,proto3" json:"Director,omitempty"`
	DVD        string     `protobuf:"bytes,8,opt,name=DVD,proto3" json:"DVD,omitempty"`
	Genre      string     `protobuf:"bytes,9,opt,name=Genre,proto3" json:"Genre,omitempty"`
	ImdbID     string     `protobuf:"bytes,10,opt,name=imdbID,proto3" json:"imdbID,omitempty"`
	ImdbRating string     `protobuf:"bytes,11,opt,name=imdbRating,proto3" json:"imdbRating,omitempty"`
	ImdbVotes  string     `protobuf:"bytes,12,opt,name=imdbVotes,proto3" json:"imdbVotes,omitempty"`
	Language   string     `protobuf:"bytes,13,opt,name=Language,proto3" json:"Language,omitempty"`
	Metascore  string     `protobuf:"bytes,14,opt,name=Metascore,proto3" json:"Metascore,omitempty"`
	Plot       string     `protobuf:"bytes,15,opt,name=Plot,proto3" json:"Plot,omitempty"`
	Poster     string     `protobuf:"bytes,16,opt,name=Poster,proto3" json:"Poster,omitempty"`
	Production string     `protobuf:"bytes,17,opt,name=Production,proto3" json:"Production,omitempty"`
	Rated      string     `protobuf:"bytes,18,opt,name=Rated,proto3" json:"Rated,omitempty"`
	Ratings    []*Ratings `protobuf:"bytes,19,rep,name=Ratings,proto3" json:"Ratings,omitempty"`
	Released   string     `protobuf:"bytes,20,opt,name=Released,proto3" json:"Released,omitempty"`
	Runtime    string     `protobuf:"bytes,22,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	Title      string     `protobuf:"bytes,23,opt,name=Title,proto3" json:"Title,omitempty"`
	Type       string     `protobuf:"bytes,24,opt,name=Type,proto3" json:"Type,omitempty"`
	Website    string     `protobuf:"bytes,25,opt,name=Website,proto3" json:"Website,omitempty"`
	Writer     string     `protobuf:"bytes,26,opt,name=Writer,proto3" json:"Writer,omitempty"`
	Year       string     `protobuf:"bytes,27,opt,name=Year,proto3" json:"Year,omitempty"`
}

func (x *ResponseImdbID) Reset() {
	*x = ResponseImdbID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImdbID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImdbID) ProtoMessage() {}

func (x *ResponseImdbID) ProtoReflect() protoreflect.Message {
	mi := &file_movies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImdbID.ProtoReflect.Descriptor instead.
func (*ResponseImdbID) Descriptor() ([]byte, []int) {
	return file_movies_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseImdbID) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *ResponseImdbID) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ResponseImdbID) GetActors() string {
	if x != nil {
		return x.Actors
	}
	return ""
}

func (x *ResponseImdbID) GetAwards() string {
	if x != nil {
		return x.Awards
	}
	return ""
}

func (x *ResponseImdbID) GetBoxOffice() string {
	if x != nil {
		return x.BoxOffice
	}
	return ""
}

func (x *ResponseImdbID) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ResponseImdbID) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *ResponseImdbID) GetDVD() string {
	if x != nil {
		return x.DVD
	}
	return ""
}

func (x *ResponseImdbID) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *ResponseImdbID) GetImdbID() string {
	if x != nil {
		return x.ImdbID
	}
	return ""
}

func (x *ResponseImdbID) GetImdbRating() string {
	if x != nil {
		return x.ImdbRating
	}
	return ""
}

func (x *ResponseImdbID) GetImdbVotes() string {
	if x != nil {
		return x.ImdbVotes
	}
	return ""
}

func (x *ResponseImdbID) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ResponseImdbID) GetMetascore() string {
	if x != nil {
		return x.Metascore
	}
	return ""
}

func (x *ResponseImdbID) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *ResponseImdbID) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *ResponseImdbID) GetProduction() string {
	if x != nil {
		return x.Production
	}
	return ""
}

func (x *ResponseImdbID) GetRated() string {
	if x != nil {
		return x.Rated
	}
	return ""
}

func (x *ResponseImdbID) GetRatings() []*Ratings {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *ResponseImdbID) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

func (x *ResponseImdbID) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ResponseImdbID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseImdbID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseImdbID) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ResponseImdbID) GetWriter() string {
	if x != nil {
		return x.Writer
	}
	return ""
}

func (x *ResponseImdbID) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

type Ratings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Ratings) Reset() {
	*x = Ratings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratings) ProtoMessage() {}

func (x *Ratings) ProtoReflect() protoreflect.Message {
	mi := &file_movies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratings.ProtoReflect.Descriptor instead.
func (*Ratings) Descriptor() ([]byte, []int) {
	return file_movies_proto_rawDescGZIP(), []int{4}
}

func (x *Ratings) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Ratings) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_movies_proto protoreflect.FileDescriptor

var file_movies_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x64, 0x62, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x72, 0x68, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x05, 0x73, 0x65, 0x61, 0x72, 0x68, 0x22, 0x76, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x78,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6f,
	0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x44, 0x56, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x56, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6c, 0x6f, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x70, 0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x46,
	0x69, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x64, 0x62, 0x49,
	0x44, 0x22, 0x00, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x66, 0x69, 0x72, 0x64, 0x61, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x62, 0x69, 0x74, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_movies_proto_rawDescOnce sync.Once
	file_movies_proto_rawDescData = file_movies_proto_rawDesc
)

func file_movies_proto_rawDescGZIP() []byte {
	file_movies_proto_rawDescOnce.Do(func() {
		file_movies_proto_rawDescData = protoimpl.X.CompressGZIP(file_movies_proto_rawDescData)
	})
	return file_movies_proto_rawDescData
}

var file_movies_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_movies_proto_goTypes = []interface{}{
	(*Request)(nil),        // 0: movies.Request
	(*Response)(nil),       // 1: movies.Response
	(*Search)(nil),         // 2: movies.Search
	(*ResponseImdbID)(nil), // 3: movies.ResponseImdbID
	(*Ratings)(nil),        // 4: movies.Ratings
}
var file_movies_proto_depIdxs = []int32{
	2, // 0: movies.Response.searh:type_name -> movies.Search
	4, // 1: movies.ResponseImdbID.Ratings:type_name -> movies.Ratings
	0, // 2: movies.Movies.Find:input_type -> movies.Request
	0, // 3: movies.Movies.FindByImdbID:input_type -> movies.Request
	1, // 4: movies.Movies.Find:output_type -> movies.Response
	3, // 5: movies.Movies.FindByImdbID:output_type -> movies.ResponseImdbID
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_movies_proto_init() }
func file_movies_proto_init() {
	if File_movies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_movies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImdbID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_movies_proto_goTypes,
		DependencyIndexes: file_movies_proto_depIdxs,
		MessageInfos:      file_movies_proto_msgTypes,
	}.Build()
	File_movies_proto = out.File
	file_movies_proto_rawDesc = nil
	file_movies_proto_goTypes = nil
	file_movies_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MoviesClient is the client API for Movies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoviesClient interface {
	Find(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	FindByImdbID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseImdbID, error)
}

type moviesClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesClient(cc grpc.ClientConnInterface) MoviesClient {
	return &moviesClient{cc}
}

func (c *moviesClient) Find(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/movies.Movies/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesClient) FindByImdbID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseImdbID, error) {
	out := new(ResponseImdbID)
	err := c.cc.Invoke(ctx, "/movies.Movies/FindByImdbID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesServer is the server API for Movies service.
type MoviesServer interface {
	Find(context.Context, *Request) (*Response, error)
	FindByImdbID(context.Context, *Request) (*ResponseImdbID, error)
}

// UnimplementedMoviesServer can be embedded to have forward compatible implementations.
type UnimplementedMoviesServer struct {
}

func (*UnimplementedMoviesServer) Find(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedMoviesServer) FindByImdbID(context.Context, *Request) (*ResponseImdbID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByImdbID not implemented")
}

func RegisterMoviesServer(s *grpc.Server, srv MoviesServer) {
	s.RegisterService(&_Movies_serviceDesc, srv)
}

func _Movies_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movies.Movies/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).Find(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movies_FindByImdbID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).FindByImdbID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movies.Movies/FindByImdbID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).FindByImdbID(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Movies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movies.Movies",
	HandlerType: (*MoviesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Movies_Find_Handler,
		},
		{
			MethodName: "FindByImdbID",
			Handler:    _Movies_FindByImdbID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movies.proto",
}
